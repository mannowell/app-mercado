&lt;template>
  &lt;ion-page>
    &lt;ion-header>
      &lt;ion-toolbar>
        &lt;ion-buttons slot="start">
          &lt;ion-back-button default-href="/listas">&lt;/ion-back-button>
        &lt;/ion-buttons>
        &lt;ion-title>Detalhes da Lista&lt;/ion-title>
        &lt;ion-buttons slot="end">
          &lt;ion-button @click="addItem">
            &lt;ion-icon :icon="addOutline">&lt;/ion-icon>
          &lt;/ion-button>
        &lt;/ion-buttons>
      &lt;/ion-toolbar>
    &lt;/ion-header>

    &lt;ion-content :fullscreen="true">
      &lt;ion-list>
        &lt;ion-item-sliding v-for="item in itens" :key="item.id">
          &lt;ion-item>
            &lt;ion-checkbox
              slot="start"
              v-model="item.comprado"
              @ion-change="toggleComprado(item)"
            >&lt;/ion-checkbox>
            &lt;ion-label>
              &lt;h2>{{ getProdutoNome(item.produtoId) }}&lt;/h2>
              &lt;p>Quantidade: {{ item.quantidade }}&lt;/p>
            &lt;/ion-label>
            &lt;ion-note slot="end" v-if="item.preco">
              R$ {{ item.preco.toFixed(2) }}
            &lt;/ion-note>
          &lt;/ion-item>

          &lt;ion-item-options side="end">
            &lt;ion-item-option color="danger" @click="deleteItem(item.id)">
              Excluir
            &lt;/ion-item-option>
          &lt;/ion-item-options>
        &lt;/ion-item-sliding>
      &lt;/ion-list>

      &lt;ion-fab vertical="bottom" horizontal="end" slot="fixed">
        &lt;ion-fab-button @click="concluirLista" :disabled="!todosItensComprados">
          &lt;ion-icon :icon="checkmarkOutline">&lt;/ion-icon>
        &lt;/ion-fab-button>
      &lt;/ion-fab>
    &lt;/ion-content>

    &lt;!-- Modal para adicionar item -->
    &lt;ion-modal :is-open="isModalOpen" @didDismiss="closeModal">
      &lt;ion-header>
        &lt;ion-toolbar>
          &lt;ion-title>Adicionar Item&lt;/ion-title>
          &lt;ion-buttons slot="end">
            &lt;ion-button @click="closeModal">Fechar&lt;/ion-button>
          &lt;/ion-buttons>
        &lt;/ion-toolbar>
      &lt;/ion-header>
      &lt;ion-content class="ion-padding">
        &lt;form @submit.prevent="salvarItem">
          &lt;ion-item>
            &lt;ion-label position="stacked">Produto&lt;/ion-label>
            &lt;ion-select v-model="novoItem.produtoId">
              &lt;ion-select-option
                v-for="produto in produtos"
                :key="produto.id"
                :value="produto.id"
              >
                {{ produto.nome }}
              &lt;/ion-select-option>
            &lt;/ion-select>
          &lt;/ion-item>

          &lt;ion-item>
            &lt;ion-label position="stacked">Quantidade&lt;/ion-label>
            &lt;ion-input
              type="number"
              v-model="novoItem.quantidade"
              min="1"
            >&lt;/ion-input>
          &lt;/ion-item>

          &lt;div class="ion-padding">
            &lt;ion-button expand="block" type="submit">
              Adicionar
            &lt;/ion-button>
          &lt;/div>
        &lt;/form>
      &lt;/ion-content>
    &lt;/ion-modal>
  &lt;/ion-page>
&lt;/template>

&lt;script lang="ts">
import { defineComponent, ref, onMounted, computed } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import {
  IonPage,
  IonHeader,
  IonToolbar,
  IonTitle,
  IonContent,
  IonList,
  IonItem,
  IonLabel,
  IonNote,
  IonButton,
  IonButtons,
  IonBackButton,
  IonIcon,
  IonCheckbox,
  IonItemSliding,
  IonItemOptions,
  IonItemOption,
  IonFab,
  IonFabButton,
  IonModal,
  IonSelect,
  IonSelectOption,
  IonInput
} from '@ionic/vue';
import { addOutline, checkmarkOutline } from 'ionicons/icons';
import { ItemLista, Produto } from '@/types';
import { DatabaseService } from '@/services/DatabaseService';

export default defineComponent({
  name: 'DetalhesListaView',
  components: {
    IonPage,
    IonHeader,
    IonToolbar,
    IonTitle,
    IonContent,
    IonList,
    IonItem,
    IonLabel,
    IonNote,
    IonButton,
    IonButtons,
    IonBackButton,
    IonIcon,
    IonCheckbox,
    IonItemSliding,
    IonItemOptions,
    IonItemOption,
    IonFab,
    IonFabButton,
    IonModal,
    IonSelect,
    IonSelectOption,
    IonInput
  },
  setup() {
    const route = useRoute();
    const router = useRouter();
    const db = DatabaseService.getInstance();
    const listaId = Number(route.params.id);
    
    const itens = ref<ItemLista[]>([]);
    const produtos = ref<Produto[]>([]);
    const isModalOpen = ref(false);
    const novoItem = ref({
      produtoId: 0,
      quantidade: 1,
      comprado: false
    });

    const produtosMap = ref<Map<number, Produto>>(new Map());

    const loadData = async () => {
      await db.init();
      itens.value = await db.getItensLista(listaId);
      produtos.value = await db.getProdutos();
      
      // Criar mapa de produtos para acesso rápido
      produtosMap.value = new Map(
        produtos.value.map(p => [p.id!, p])
      );
    };

    const getProdutoNome = (produtoId: number): string => {
      return produtosMap.value.get(produtoId)?.nome || 'Produto não encontrado';
    };

    const toggleComprado = async (item: ItemLista) => {
      // Implementar atualização do status do item
    };

    const addItem = () => {
      isModalOpen.value = true;
    };

    const closeModal = () => {
      isModalOpen.value = false;
      novoItem.value = {
        produtoId: 0,
        quantidade: 1,
        comprado: false
      };
    };

    const salvarItem = async () => {
      if (novoItem.value.produtoId && novoItem.value.quantidade > 0) {
        await db.addItemLista({
          ...novoItem.value,
          listaId
        });
        closeModal();
        loadData();
      }
    };

    const deleteItem = async (itemId: number) => {
      // Implementar exclusão do item
    };

    const todosItensComprados = computed(() => {
      return itens.value.length > 0 && itens.value.every(item => item.comprado);
    });

    const concluirLista = async () => {
      // Implementar conclusão da lista
    };

    onMounted(() => {
      loadData();
    });

    return {
      itens,
      produtos,
      isModalOpen,
      novoItem,
      addItem,
      closeModal,
      salvarItem,
      deleteItem,
      getProdutoNome,
      toggleComprado,
      todosItensComprados,
      concluirLista,
      addOutline,
      checkmarkOutline
    };
  }
});
</script>
